// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grpc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "grpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nlu_grpc {

namespace {

const ::google::protobuf::Descriptor* NluRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NluRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NluReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NluReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_grpc_2eproto() {
  protobuf_AddDesc_grpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "grpc.proto");
  GOOGLE_CHECK(file != NULL);
  NluRequest_descriptor_ = file->message_type(0);
  static const int NluRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluRequest, name_),
  };
  NluRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NluRequest_descriptor_,
      NluRequest::default_instance_,
      NluRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(NluRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluRequest, _is_default_instance_));
  NluReply_descriptor_ = file->message_type(1);
  static const int NluReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluReply, message_),
  };
  NluReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NluReply_descriptor_,
      NluReply::default_instance_,
      NluReply_offsets_,
      -1,
      -1,
      -1,
      sizeof(NluReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_grpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NluRequest_descriptor_, &NluRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NluReply_descriptor_, &NluReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_grpc_2eproto() {
  delete NluRequest::default_instance_;
  delete NluRequest_reflection_;
  delete NluReply::default_instance_;
  delete NluReply_reflection_;
}

void protobuf_AddDesc_grpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngrpc.proto\022\010nlu_grpc\"\032\n\nNluRequest\022\014\n\004"
    "name\030\001 \001(\t\"\033\n\010NluReply\022\017\n\007message\030\001 \001(\t2"
    "E\n\007Greeter\022:\n\014SendSentence\022\024.nlu_grpc.Nl"
    "uRequest\032\022.nlu_grpc.NluReply\"\000B\006\242\002\003HLWb\006"
    "proto3", 166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "grpc.proto", &protobuf_RegisterTypes);
  NluRequest::default_instance_ = new NluRequest();
  NluReply::default_instance_ = new NluReply();
  NluRequest::default_instance_->InitAsDefaultInstance();
  NluReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_grpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_grpc_2eproto {
  StaticDescriptorInitializer_grpc_2eproto() {
    protobuf_AddDesc_grpc_2eproto();
  }
} static_descriptor_initializer_grpc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int NluRequest::kNameFieldNumber;
#endif  // !_MSC_VER

NluRequest::NluRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nlu_grpc.NluRequest)
}

void NluRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NluRequest::NluRequest(const NluRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nlu_grpc.NluRequest)
}

void NluRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NluRequest::~NluRequest() {
  // @@protoc_insertion_point(destructor:nlu_grpc.NluRequest)
  SharedDtor();
}

void NluRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NluRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NluRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NluRequest_descriptor_;
}

const NluRequest& NluRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grpc_2eproto();
  return *default_instance_;
}

NluRequest* NluRequest::default_instance_ = NULL;

NluRequest* NluRequest::New(::google::protobuf::Arena* arena) const {
  NluRequest* n = new NluRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NluRequest::Clear() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NluRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nlu_grpc.NluRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nlu_grpc.NluRequest.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nlu_grpc.NluRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nlu_grpc.NluRequest)
  return false;
#undef DO_
}

void NluRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nlu_grpc.NluRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nlu_grpc.NluRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:nlu_grpc.NluRequest)
}

::google::protobuf::uint8* NluRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nlu_grpc.NluRequest)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nlu_grpc.NluRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nlu_grpc.NluRequest)
  return target;
}

int NluRequest::ByteSize() const {
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NluRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NluRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NluRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NluRequest::MergeFrom(const NluRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void NluRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NluRequest::CopyFrom(const NluRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NluRequest::IsInitialized() const {

  return true;
}

void NluRequest::Swap(NluRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NluRequest::InternalSwap(NluRequest* other) {
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NluRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NluRequest_descriptor_;
  metadata.reflection = NluRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NluRequest

// optional string name = 1;
void NluRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NluRequest::name() const {
  // @@protoc_insertion_point(field_get:nlu_grpc.NluRequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NluRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlu_grpc.NluRequest.name)
}
 void NluRequest::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlu_grpc.NluRequest.name)
}
 void NluRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlu_grpc.NluRequest.name)
}
 ::std::string* NluRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nlu_grpc.NluRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NluRequest::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NluRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nlu_grpc.NluRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int NluReply::kMessageFieldNumber;
#endif  // !_MSC_VER

NluReply::NluReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:nlu_grpc.NluReply)
}

void NluReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NluReply::NluReply(const NluReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:nlu_grpc.NluReply)
}

void NluReply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NluReply::~NluReply() {
  // @@protoc_insertion_point(destructor:nlu_grpc.NluReply)
  SharedDtor();
}

void NluReply::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NluReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NluReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NluReply_descriptor_;
}

const NluReply& NluReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grpc_2eproto();
  return *default_instance_;
}

NluReply* NluReply::default_instance_ = NULL;

NluReply* NluReply::New(::google::protobuf::Arena* arena) const {
  NluReply* n = new NluReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NluReply::Clear() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NluReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:nlu_grpc.NluReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nlu_grpc.NluReply.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:nlu_grpc.NluReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:nlu_grpc.NluReply)
  return false;
#undef DO_
}

void NluReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:nlu_grpc.NluReply)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nlu_grpc.NluReply.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // @@protoc_insertion_point(serialize_end:nlu_grpc.NluReply)
}

::google::protobuf::uint8* NluReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:nlu_grpc.NluReply)
  // optional string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nlu_grpc.NluReply.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:nlu_grpc.NluReply)
  return target;
}

int NluReply::ByteSize() const {
  int total_size = 0;

  // optional string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NluReply::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NluReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NluReply>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NluReply::MergeFrom(const NluReply& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void NluReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NluReply::CopyFrom(const NluReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NluReply::IsInitialized() const {

  return true;
}

void NluReply::Swap(NluReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NluReply::InternalSwap(NluReply* other) {
  message_.Swap(&other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NluReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NluReply_descriptor_;
  metadata.reflection = NluReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NluReply

// optional string message = 1;
void NluReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NluReply::message() const {
  // @@protoc_insertion_point(field_get:nlu_grpc.NluReply.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NluReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nlu_grpc.NluReply.message)
}
 void NluReply::set_message(const char* value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nlu_grpc.NluReply.message)
}
 void NluReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nlu_grpc.NluReply.message)
}
 ::std::string* NluReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:nlu_grpc.NluReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NluReply::release_message() {
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NluReply::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:nlu_grpc.NluReply.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace nlu_grpc

// @@protoc_insertion_point(global_scope)
